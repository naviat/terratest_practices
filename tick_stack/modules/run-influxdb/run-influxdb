#!/usr/bin/env bash

set -e

# Import the appropriate bash commons libraries
readonly BASH_COMMONS_DIR="/opt/gruntwork/bash-commons"
readonly DEFAULT_META_CONFIG_FILE_PATH="/etc/influxdb/influxdb-meta.conf"
readonly DEFAULT_DATA_CONFIG_FILE_PATH="/etc/influxdb/influxdb.conf"
readonly MAX_RETRIES=60
readonly SLEEP_BETWEEN_RETRIES_SEC=5

if [[ ! -d "$BASH_COMMONS_DIR" ]]; then
  echo "ERROR: this script requires that bash-commons is installed in $BASH_COMMONS_DIR. See https://github.com/gruntwork-io/bash-commons for more info."
  exit 1
fi

source "$BASH_COMMONS_DIR/assert.sh"
source "$BASH_COMMONS_DIR/aws-wrapper.sh"
source "$BASH_COMMONS_DIR/file.sh"
source "$BASH_COMMONS_DIR/log.sh"

function print_usage {
  echo
  echo "Usage: run-influxdb [options]"
  echo
  echo "This script can be used to configure and initialize InfluxDB. This script has been tested with Ubuntu 18.04 and Amazon Linux 2."
  echo
  echo "Options:"
  echo
  echo -e "  --hostname\t\tThe hostname of the current node."
  echo -e "  --node-type\t\tSpecifies whether the instance will be a Meta or Data node. Must be one of 'meta' or 'data'."
  echo -e "  --meta-asg-name\tThe name of the ASG that contains meta nodes."
  echo -e "  --data-asg-name\tThe name of the ASG that contains data nodes."
  echo -e "  --region\t\tThe AWS region the Auto Scaling Groups are deployed in."
  echo -e "  --auto-fill\t\tSearch the InfluxDB config file for KEY and replace it with VALUE. May be repeated."

  echo
  echo "Example:"
  echo
  echo "  run-influxdb  --node-type meta --meta-asg-name asg-meta --data-asg-name asg-data --region us-east-1 --auto-fill '<__LICENSE_KEY__>=******'"
}

function get_rally_point_hostname {
  local -r asg_name="$1"
  local -r region="$2"

  log_info "Looking up rally point for ASG $asg_name in $region"

  local instances
  instances=$(aws_wrapper_wait_for_instances_in_asg "$asg_name" "$region")
  assert_not_empty_or_null "$instances" "Fetch list of Instances in ASG $asg_name"

  local rally_point
  rally_point=$(echo "$instances" | jq -r '[.Reservations[].Instances[]] | sort_by(.LaunchTime, .InstanceId) | .[0]')
  assert_not_empty_or_null "$rally_point" "Select rally point server in ASG $asg_name"

  local hostname
  hostname=$(echo "$rally_point" | jq -r ".PrivateDnsName")
  assert_not_empty_or_null "$hostname" "Get private hostname for rally point in $asg_name: $rally_point"

  echo -n "$hostname"
}

function discover_all_nodes {
  local -r meta_asg_name="$1"
  local -r data_asg_name="$2"
  local -r region="$3"

  local -a meta_hosts
  local -a data_hosts

  meta_hosts=($(discover_nodes "$meta_asg_name" "$region"))
  data_hosts=($(discover_nodes "$data_asg_name" "$region"))

  log_info "Writing node information to /etc/hosts"

  for meta_host in "${meta_hosts[@]}"
  do
    file_replace_or_append_text "$meta_host" "$meta_host" "/etc/hosts"
  done

  for data_host in "${data_hosts[@]}"
  do
    file_replace_or_append_text "$data_host" "$data_host" "/etc/hosts"
  done
}

function discover_nodes {
  local -r asg_name="$1"
  local -r region="$2"

  local -a ips
  ips=($(aws_wrapper_get_ips_in_asg "$asg_name" "$region" "true"))

  local -a hostnames
  hostnames=($(aws_wrapper_get_hostnames_in_asg "$asg_name" "$region" "false"))

  if [[ "${#ips[@]}" -ne "${#hostnames[@]}" ]]; then
    log_error "IPs and hostnames are not of the same length"
    exit 1
  fi

  local -a hosts=()
  for (( i=0; i<"${#ips[@]}"; i++ ))
  do
    hosts+=("${ips[$i]}\t${hostnames[$i]}")
  done

  echo "${hosts[@]}"
}

function join_cluster {
  local -r node_type="$1"
  local -r node_hostname="$2"
  local -r rally_point_hostname="$3"

  set +e

  if [[ "$node_hostname" == "$rally_point_hostname" ]]; then

    log_info "This server is the rally point for the cluster."

    if [[ "$node_type" == "meta" ]]; then
      influxd-ctl add-meta "$node_hostname:8091"
      echo -n "$?"
    else
      influxd-ctl add-data "$node_hostname:8088"
      echo -n "$?"
    fi

  else

    log_info "The rally point for the cluster is $rally_point_hostname"

    if [[ "$node_type" == "meta" ]]; then
      influxd-ctl -bind "$rally_point_hostname:8091" add-meta "$node_hostname:8091"
      echo -n "$?"
    else
      influxd-ctl -bind "$rally_point_hostname:8091" add-data "$node_hostname:8088"
      echo -n "$?"
    fi

  fi

  set -e
}

function wait_for_node_to_join_cluster {
  local -r node_type="$1"
  local -r node_hostname="$2"
  local -r rally_point_hostname="$3"

  for (( i=0; i<"$MAX_RETRIES"; i++ )); do
    local exit_code
    exit_code=$(join_cluster "$node_type" "$node_hostname" "$rally_point_hostname")

    if [[ "$exit_code" == "1" ]]; then
      log_warn "InfluxDB meta node $rally_point_hostname is not yet ready. Will sleep for $SLEEP_BETWEEN_RETRIES_SEC seconds and check again."
      sleep "$SLEEP_BETWEEN_RETRIES_SEC"
    else
      log_info "$node_hostname joined the cluster successfully."
      return
    fi
  done

  log_error "InfluxDB meta node $rally_point_hostname still not ready after $MAX_RETRIES retries."
  exit 1
}

function start_influxdb {
  local -r node_type="$1"

  set +e

  if [[ "$node_type" == "meta" ]]; then
    log_info "Starting InfluxDB Meta Service"
    sudo systemctl enable influxdb-meta.service
    sudo systemctl start influxdb-meta.service
    echo -n "$?"
  else
    log_info "Starting InfluxDB Data Service"
    sudo systemctl enable influxdb.service
    sudo systemctl start influxdb.service
    echo -n "$?"
  fi

  set -e
}

function wait_for_service_to_start {
  local -r node_type="$1"
  local -r max_retries=5
  local -r sleep_between_retries=5

  for (( i=0; i<"$max_retries"; i++ )); do
    local exit_code
    exit_code=$(start_influxdb "$node_type")

    if [[ "$exit_code" == "0" ]]; then
      log_info "Service started successfully."
      # The services need a few seconds to fully initialize
      # before we start hitting them with cluster operation requests
      sleep 5
      return
    else
      log_warn "Service couldn't start. Will sleep for $sleep_between_retries seconds and try again."
      sleep "$sleep_between_retries"
    fi
  done

  log_error "Service failed to start after $max_retries retries."
  exit 1
}

function run_influxdb {
  local node_hostname=""
  local node_type=""
  local meta_asg_name=""
  local data_asg_name=""
  local region=""
  local -a auto_fill=()

  while [[ $# > 0 ]]; do
    local key="$1"
    case "$key" in
      --help)
        print_usage
        exit
        ;;
      --hostname)
        assert_not_empty "$key" "$2"
        node_hostname="$2"
        shift
        ;;
      --node-type)
        assert_not_empty "$key" "$2"
        node_type="$2"
        shift
        ;;
      --meta-asg-name)
        assert_not_empty "$key" "$2"
        meta_asg_name="$2"
        shift
        ;;
      --data-asg-name)
        assert_not_empty "$key" "$2"
        data_asg_name="$2"
        shift
        ;;
      --region)
        assert_not_empty "$key" "$2"
        region="$2"
        shift
        ;;
      --auto-fill)
        assert_not_empty "$key" "$2"
        auto_fill+=("$2")
        shift
        ;;
      *)
        echo "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "--hostname" "$node_hostname"
  assert_not_empty "--node-type" "$node_type"
  assert_value_in_list "--node-type" "$node_type" "meta" "data"
  assert_not_empty "--meta-asg-name" "$meta_asg_name"
  assert_not_empty "--data-asg-name" "$data_asg_name"
  assert_not_empty "--region" "$region"

  if [[ "$node_type" == "meta" ]]; then
    file_fill_template "$DEFAULT_META_CONFIG_FILE_PATH" "${auto_fill[@]}"
  else
    file_fill_template "$DEFAULT_DATA_CONFIG_FILE_PATH" "${auto_fill[@]}"
  fi

  discover_all_nodes "$meta_asg_name" "$data_asg_name" "$region"
  wait_for_service_to_start "$node_type"

  local rally_point_hostname
  rally_point_hostname=$(get_rally_point_hostname "$meta_asg_name" "$region")

  wait_for_node_to_join_cluster "$node_type" "$node_hostname" "$rally_point_hostname"  
}

run_influxdb "$@"
